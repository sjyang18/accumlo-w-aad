---
## This playbook changes the existing accumulo configs with kerberos, based on environment set up by other playbooks in this repo

- name: deploy namenode spn and keytab
  hosts: accumulo
  become: no
  tasks:
    - import_tasks: tasks/common_vars.yml
    - name: set spn_owner_mapping
      set_fact:
        accml_spn_owner_mapping:
          accml: accml
    - name: set variables
      set_fact:
        ldap_spn: "{{ item.key }}"
        ldap_spn_owner: "{{ item.value }}"
        ldap_spn_w_fqdn: "{{ item.key }}/{{ ansible_fqdn }}@{{ realm_name }}"
      with_dict: "{{ accml_spn_owner_mapping }}"
    - import_tasks: tasks/deploy_keytab.yml

- name: changes the existing accumulo configs with kerberos
  hosts: accumulo
  gather_facts: yes
  become: no
  tasks:
    - import_tasks: tasks/common_vars.yml
    - name: set spn_owner_mapping
      set_fact:
        accml_spn_owner_mapping:
          accml: accml
    - name: Set keberos keytab file and service principal name
      set_fact:
        accumulo_short_spn: "{{ item.key }}"
        accumulo_service_principal_keytabfile: "{{ keytabs_deployment_dir }}/{{ item.key }}.keytab"
        accumulo_service_principal: "{{ item.key }}/_HOST@{{ realm_name }}"
        accumulo_service_principal_w_fqdn: "{{ item.key }}/{{ ansible_fqdn }}@{{ realm_name }}"
      with_dict: "{{ accml_spn_owner_mapping }}"

    - name: check for spn keytab file exists
      stat: path={{ accumulo_service_principal_keytabfile }}
      register: keytabfile

    - name: stop playbook if keytabfile does not exist
      fail: msg="{{ accumulo_service_principal_keytabfile }} does not exist. Run retrieve_keytab_file.yml playbook first"
      when: not keytabfile.stat.exists

    - name: check if /etc/krb5.conf exists
      stat: path=/etc/krb5.conf
      register: krb5_conf_check

    - name: stop playbook if /etc/krb5.conf does not exist
      fail: msg="/etc/krb5.conf does not exist. Run join_domain.yml playbook first"
      when: not krb5_conf_check.stat.exists

    - name: Generate accumulo.jaas
      template:
        src=conf/accumulo.jaas.j2
        dest='{{ accumulo_home }}/conf/accumulo.jaas'

    - name: "update JAVA_OPTS with zookeeper sasl to accumulo-env.sh"
      blockinfile:
        path: '{{ accumulo_home }}/conf/accumulo-env.sh'
        marker: "# {mark} ANSIBLE MANAGED BLOCK for Kerberos"
        insertbefore: ^export JAVA_OPTS
        block: |
          export CLIENT_JVMFLAGS="\
            -Djavax.security.auth.useSubjectCredsOnly=false \
            -Dzookeeper.sasl.client=true -Dzookeeper.sasl.client.username=zookeeper \
            -Djava.security.auth.login.config={{ accumulo_home }}/conf/accumulo.jaas \
            -Dzookeeper.sasl.clientconfig=Client $CLIENT_JVMFLAGS"
          JAVA_OPTS=("${JAVA_OPTS[@]}" $CLIENT_JVMFLAGS)

    - name: update accumulo.properties with Kerberos setting
      blockinfile:
        path: '{{ accumulo_home }}/conf/accumulo.properties'
        marker: "# {mark} ANSIBLE MANAGED BLOCK for Kerberos"
        insertafter: '^instance.secret=(.*)$'
        block: |
          instance.security.authenticator=org.apache.accumulo.server.security.handler.KerberosAuthenticator
          instance.security.authorizor=org.apache.accumulo.server.security.handler.KerberosAuthorizor
          instance.security.permissionHandler=org.apache.accumulo.server.security.handler.KerberosPermissionHandler

          general.kerberos.keytab={{ accumulo_service_principal_keytabfile }}
          general.kerberos.principal={{ accumulo_service_principal }}
          instance.rpc.sasl.enabled=true
          rpc.sasl.qop=auth
          tserver.memory.maps.native.enabled=false
          trace.token.type=org.apache.accumulo.core.client.security.tokens.KerberosToken
          trace.user={{ accumulo_service_principal }}
          trace.token.property.keytab={{ accumulo_service_principal_keytabfile }}

          general.delegation.token.lifetime=7d
          general.delegation.token.update.interval=1d
          instance.rpc.sasl.allowed.user.impersonation=$PROXY_USER:*
          instance.rpc.sasl.allowed.host.impersonation=*
    
    - name: Comment instance.rpc.ssl.enabled out for Manager
      replace:
        path: '{{ accumulo_home }}/conf/accumulo.properties'
        regexp: '^instance.rpc.ssl.enabled=(.*)$'
        replace: '#instance.rpc.ssl.enabled=\1'

    - name: Comment ssl.enabled out for Client
      replace:
        path: '{{ accumulo_home }}/conf/accumulo-client.properties'
        regexp: '^ssl.enabled=(.*)$'
        replace: '#ssl.enabled=\1'

    - name: update accumulo-client.properties with Kerberos setting (auth.type)
      lineinfile:
        path: '{{ accumulo_home }}/conf/accumulo-client.properties'
        regexp: '^auth.type=(.*)$'
        line: 'auth.type=kerberos' 

    - name: update accumulo-client.properties with Kerberos setting (auth.principal)
      lineinfile:
        path: '{{ accumulo_home }}/conf/accumulo-client.properties'
        regexp: '^auth.principal=(.*)$'
        line: 'auth.principal={{ accumulo_service_principal_w_fqdn }}' 

    - name: update accumulo-client.properties with Kerberos setting (auth.token)
      lineinfile:
        path: '{{ accumulo_home }}/conf/accumulo-client.properties'
        regexp: '^auth.token=(.*)$'
        line: 'auth.token={{ accumulo_service_principal_keytabfile }}'

    - name: update accumulo-client.properties with Kerberos setting (auth.token)
      blockinfile:
        path: '{{ accumulo_home }}/conf/accumulo-client.properties'
        insertafter: '^auth.token=(.*)$'
        block: |
          sasl.enabled=true
          sasl.qop=auth
          sasl.kerberos.server.primary={{ accumulo_short_spn }}
