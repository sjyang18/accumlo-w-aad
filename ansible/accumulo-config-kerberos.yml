---
## This playbook changes the existing accumulo configs with kerberos, based on environment set up by other playbooks in this repo

- name: changes the existing accumulo configs with kerberos
  hosts: accumulo
  gather_facts: yes
  become: no
  tasks:
    - import_tasks: tasks/common_vars.yml

    - name: Set keberos keytab file and service principal name
      set_fact:
        accumulo_service_principal_keytabfile: "{{ keytabs_deployment_dir }}/{{ service_principal_login }}.keytab"
        accumulo_service_principal: "{{ service_principal_login }}/_HOST@{{ realm_name }}"

    - name: check for spn keytab file exists
      stat: path={{ accumulo_service_principal_keytabfile }}
      register: keytabfile

    - name: stop playbook if keytabfile does not exist
      fail: msg="{{ accumulo_service_principal_keytabfile }} does not exist. Run retrieve_keytab_file.yml playbook first"
      when: not keytabfile.stat.exists

    - name: check if /etc/krb5.conf exists
      stat: path=/etc/krb5.conf
      register: krb5_conf_check

    - name: stop playbook if /etc/krb5.conf does not exist
      fail: msg="/etc/krb5.conf does not exist. Run join_domain.yml playbook first"
      when: not krb5_conf_check.stat.exists

    - name: "'-Djava.security.krb5.conf=/etc/krb5.conf' to accumulo-env.sh"
      blockinfile:
        path: '{{ accumulo_home }}/conf/accumulo-env.sh'
        marker: "# {mark} ANSIBLE MANAGED BLOCK for Kerberos"
        insertbefore: ^export JAVA_OPTS
        block: |
          {%raw%}JAVA_OPTS=("${JAVA_OPTS[@]}" "-Djava.security.krb5.conf=/etc/krb5.conf"){%endraw%}

    - name: update accumulo.properties with Kerberos setting
      blockinfile:
        path: '{{ accumulo_home }}/conf/accumulo.properties'
        marker: "# {mark} ANSIBLE MANAGED BLOCK for Kerberos"
        insertafter: '^instance.secret=(.*)$'
        block: |
          instance.security.authenticator=org.apache.accumulo.server.security.handler.KerberosAuthenticator
          instance.security.authorizor=org.apache.accumulo.server.security.handler.KerberosAuthorizor
          instance.security.permissionHandler=org.apache.accumulo.server.security.handler.KerberosPermissionHandler

          general.kerberos.keytab={{ accumulo_service_principal_keytabfile }}
          general.kerberos.principal={{ accumulo_service_principal }}
          instance.rpc.sasl.enabled=true
          rpc.sasl.qop=auth
          tserver.memory.maps.native.enabled=false
          trace.token.type=org.apache.accumulo.core.client.security.tokens.KerberosToken
          trace.user={{ accumulo_service_principal }}
          trace.token.property.keytab={{ accumulo_service_principal_keytabfile }}

          general.delegation.token.lifetime=7d
          general.delegation.token.update.interval=1d
   
    - name: update accumulo-client.properties with Kerberos setting (auth.type)
      lineinfile:
        path: '{{ accumulo_home }}/conf/accumulo-client.properties'
        regexp: '^auth.type=(.*)$'
        line: 'auth.type=kerberos' 

    - name: update accumulo-client.properties with Kerberos setting (auth.principal)
      lineinfile:
        path: '{{ accumulo_home }}/conf/accumulo-client.properties'
        regexp: '^auth.principal=(.*)$'
        line: 'auth.principal={{ accumulo_service_principal }}' 

    - name: update accumulo-client.properties with Kerberos setting (auth.token)
      lineinfile:
        path: '{{ accumulo_home }}/conf/accumulo-client.properties'
        regexp: '^auth.token=(.*)$'
        line: 'auth.token={{ accumulo_service_principal_keytabfile }}'

    - name: update accumulo-client.properties with Kerberos setting (auth.token)
      blockinfile:
        path: '{{ accumulo_home }}/conf/accumulo-client.properties'
        insertafter: '^auth.token=(.*)$'
        block: |
          sasl.enabled=true
          sasl.qop=auth
          sasl.kerberos.server.primary={{ service_principal_login }}

