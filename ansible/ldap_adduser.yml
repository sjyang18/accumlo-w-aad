## This playbook adds login_user to AAD domain

- name: Have a directory to fetch keytab files
  hosts: localhost
  tasks:
    - name: Have a directory to fetch keytab files
      file:
        state: "{{ item }}"
        path: "{{ ansible_user_dir }}/keytabs"
      with_items:
        - absent
        - directory

- name: add accumulo user and spn to AAD domain
  hosts: accumulo, hadoop
  gather_facts: yes
  become: no
  vars_prompt:
    - name: "bind_password"
      prompt: "Password for LADP binddn"
      private: yes

  tasks:
    - name: Set login_user
      set_fact:
        login_user: "{{ lookup('env','USER') }}"
        hostname_f: "{{ ansible_fqdn }}"
        login_user_cn: "{{ lookup('env','USER') }}/{{ ansible_fqdn }}"

    - name: Set user_cn with login_user
      set_fact:
        user_cn: "{{ login_user_cn }}"

    - name: Check add_user.ldif.bak created by the previous successful creation exists
      stat:
        path: '{{ ansible_user_dir }}/add_user.ldif.bak'
      register: check_previous_execution

    - name: Generate login_user ldif file
      template: 
        src=ldapops/add_user.ldif.j2
        dest="{{ ansible_user_dir }}/add_user.ldif"
      when: not check_previous_execution.stat.exists

    - name: Run ldapadd only when ldif file is created in this playbook
      command: ldapadd -x -w {{ bind_password }}  -D '{{ ldap_binddn }}' -f {{ ansible_user_dir }}/add_user.ldif
      when: not check_previous_execution.stat.exists

    - name: Backup add_user.ldif file
      command : "mv {{ ansible_user_dir }}/add_user.ldif {{ ansible_user_dir }}/add_user.ldif.bak"
      when: not check_previous_execution.stat.exists

    - name: Set user_cn with HTTP
      set_fact:
        user_cn: "HTTP/{{ ansible_fqdn }}"
      when: not check_previous_execution.stat.exists

    - name: Generate HTTP ldif file
      template: 
        src=ldapops/add_user.ldif.j2
        dest="{{ ansible_user_dir }}/add_http.ldif"
      when: not check_previous_execution.stat.exists

    - name: Add HTTP spn
      command: ldapadd -x -w {{ bind_password }}  -D '{{ ldap_binddn }}' -f {{ ansible_user_dir }}/add_http.ldif
      when: not check_previous_execution.stat.exists

    - name: Retreive login_user's keytab from Azure AAD domain service
      expect:
        command: ktutil
        responses:
          ktutil:
            - "addent -password  -p {{ login_user_cn }}@{{ realm_name }} -k 1 -e RC4-HMAC"
            - "wkt {{ ansible_user_dir }}/{{ login_user }}.{{ ansible_hostname }}.keytab"
            - "quit"
          Password(.*): "{{ decoded_user_init_password }}"

    - name: Retreive HTTP's keytab from Azure AAD domain service
      expect:
        command: ktutil
        responses:
          ktutil:
            - "addent -password  -p HTTP/{{ ansible_fqdn }}@{{ realm_name }} -k 1 -e RC4-HMAC"
            - "wkt {{ ansible_user_dir }}/HTTP.{{ ansible_hostname }}.keytab"
            - "quit"
          Password(.*): "{{ decoded_user_init_password }}"

    - name: Fetch login_user keytab files
      fetch:
        src:  "{{ ansible_user_dir }}/{{ login_user }}.{{ ansible_hostname }}.keytab"
        dest: "{{ ansible_user_dir }}/keytabs/"
        flat: yes

    - name: Fetch HTTP keytab files
      fetch:
        src:  "{{ ansible_user_dir }}/HTTP.{{ ansible_hostname }}.keytab"
        dest: "{{ ansible_user_dir }}/keytabs/"
        flat: yes